(* generated by imandra-extract from "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire" *)

open Imandra_prelude;;

(* start generated code here *)

#1 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

type id = int
#3 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

type view =
  | AllTodos 
  | ActiveTodos 
  | CompletedTodos 
#8 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

type msg =
  | EditNewTodo of string 
  | AddNewTodo 
  | HoverTodo of id 
  | StartEditingTodo of id 
  | EditTodo of id * string 
  | DoneEditingTodo of id 
  | ToggleTodo of id 
  | DeleteTodo of id 
  | View of view 
  | ToggleAll 
  | ClearCompleted 
#21 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

type todo =
  {
  id: int ;
  done_: bool ;
  text: string ;
  hovered: bool ;
  editing: bool }
#29 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

type state =
  {
  todos: todo option list ;
  newTodoText: string ;
  viewing: view ;
  nextId: int }
#36 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

let initialState =
  {
    todos = [];
    newTodoText = "";
    viewing = AllTodos;
    nextId = (Z.of_string "0")
  }
#38 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

let updateTodo f state id =
  if id < (Z.of_string "0")
  then ((Error ("id must be non negative"))[@explicit_arity ])
  else
    (let before = List.take id state.todos in
     match List.drop id state.todos with
     | target::rest ->
         ((Ok ({ state with todos = (before @ ([f target] @ rest)) }))
         [@explicit_arity ])
     | _ -> ((Error ("No todo with id"))[@explicit_arity ]))
#50 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

let activeCount state =
  (state.todos |>
     (List.filter_map
        (Option.flat_map
           (fun t -> if t.done_ then None else ((Some (t))[@explicit_arity ])))))
    |> List.length
#63 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

let completedCount state =
  (state.todos |>
     (List.filter_map
        (Option.flat_map
           (fun t -> if t.done_ then ((Some (t))[@explicit_arity ]) else None))))
    |> List.length
#76 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

let totalCount state =
  (state.todos |> (List.filter_map (fun t -> t))) |> List.length
#79 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

let shownTodos state =
  let flat_m t =
    match ((state.viewing), (t.done_)) with
    | (AllTodos, _) -> ((Some (t))[@explicit_arity ])
    | (ActiveTodos, false) -> ((Some (t))[@explicit_arity ])
    | (CompletedTodos, true) -> ((Some (t))[@explicit_arity ])
    | _ -> None in
  let fil_m ot = Option.flat_map flat_m ot in
  List.filter_map fil_m state.todos
#91 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

let update msg state =
  match msg with
  | ((EditNewTodo (text))[@explicit_arity ]) ->
      ((Ok ({ state with newTodoText = text }))[@explicit_arity ])
  | AddNewTodo ->
      let newTodo =
        {
          id = (state.nextId);
          done_ = false;
          text = (state.newTodoText);
          hovered = false;
          editing = false
        } in
      let newState =
        {
          state with
          nextId = (state.nextId + (Z.of_string "1"));
          newTodoText = "";
          todos =
            (List.append state.todos [((Some (newTodo))[@explicit_arity ])])
        } in
      ((Ok (newState))[@explicit_arity ])
  | ((HoverTodo (id))[@explicit_arity ]) ->
      updateTodo (Option.map (fun t -> { t with hovered = true })) state id
  | ((StartEditingTodo (id))[@explicit_arity ]) ->
      updateTodo (Option.map (fun t -> { t with editing = true })) state id
  | ((EditTodo (id, text))[@explicit_arity ]) ->
      updateTodo (Option.map (fun t -> { t with text })) state id
  | ((DoneEditingTodo (id))[@explicit_arity ]) ->
      updateTodo (Option.map (fun t -> { t with editing = false })) state id
  | ((ToggleTodo (id))[@explicit_arity ]) ->
      updateTodo (Option.map (fun t -> { t with done_ = (not t.done_) }))
        state id
  | ToggleAll ->
      let anyNotDone =
        List.exists
          (fun ot ->
             match ot with
             | None -> false
             | ((Some (t))[@explicit_arity ]) -> not t.done_) state.todos in
      ((Ok
          ({
             state with
             todos =
               (List.map
                  (Option.map (fun t -> { t with done_ = anyNotDone }))
                  state.todos)
           }))
        [@explicit_arity ])
  | ((DeleteTodo (id))[@explicit_arity ]) ->
      updateTodo (fun _t -> None) state id
  | ((View (type_))[@explicit_arity ]) ->
      ((Ok ({ state with viewing = type_ }))[@explicit_arity ])
  | ClearCompleted ->
      ((Ok
          ({
             state with
             todos =
               (state.todos |>
                  (List.map
                     (Option.flat_map
                        (fun t ->
                           if t.done_
                           then None
                           else ((Some (t))[@explicit_arity ])))))
           }))
      [@explicit_arity ])
#153 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

let len_append x y =
  (List.length (x @ y)) = ((List.length x) + (List.length y))[@@auto ]
  [@@rw ][@@imandra_theorem ]
#159 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

let forall_map f g l =
  (List.for_all f (List.map g l)) = (List.for_all (fun x -> f (g x)) l)
  [@@auto ][@@rw ][@@imandra_theorem ]
#165 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

let vg_edit_ok state todos n text =
  let state = { state with todos } in
  (Option.is_some (List.nth n state.todos)) ==>
    (match update ((EditTodo (n, text))[@explicit_arity ]) state with
     | Ok _ -> true
     | Error _ -> false)
#176 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

let vg_add_todo s =
  match update AddNewTodo s with
  | ((Ok (s'))[@explicit_arity ]) ->
      (List.length s'.todos) = ((List.length s.todos) + (Z.of_string "1"))
  | _ -> false
#182 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

let vg_edit_todo state todos n text =
  let state = { state with todos } in
  (match List.nth n state.todos with
   | ((Some (Some _))[@explicit_arity ]) -> true
   | _ -> false) ==>
    (match update ((EditTodo (n, text))[@explicit_arity ]) state with
     | ((Ok (state'))[@explicit_arity ]) ->
         (match List.nth n state'.todos with
          | ((Some (((Some (t))[@explicit_arity ])))[@explicit_arity ]) ->
              t.text = text
          | _ -> false)
     | _ -> false)
#202 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

let vg_clear_completed state todos =
  let state = { state with todos } in
  match update ClearCompleted state with
  | ((Ok (state'))[@explicit_arity ]) ->
      List.for_all
        (fun t ->
           match t with
           | ((Some (t))[@explicit_arity ]) -> not t.done_
           | None -> true) state'.todos
  | _ -> false
#218 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

let vg_toggle_all state todos =
  let state = { state with todos } in
  let allDoneP f =
    List.for_all
      (fun ot ->
         match ot with
         | None -> true
         | ((Some (t))[@explicit_arity ]) -> f t.done_) in
  let anyNotDone = not (allDoneP id state.todos) in
  match update ToggleAll state with
  | ((Ok (state'))[@explicit_arity ]) ->
      allDoneP ((=) anyNotDone) state'.todos
  | _ -> false
#234 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

[@@@require "decoders"]
#236 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

module D = Decoders[@@program ]
#239 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

module Decode(D:D.Decode.S) =
  struct
    open D
    let viewingTodo =
      (string >>=
         (function
          | (("AllTodos")[@reason.raw_literal "AllTodos"]) ->
              succeed AllTodos
          | (("ActiveTodos")[@reason.raw_literal "ActiveTodos"]) ->
              succeed ActiveTodos
          | (("CompletedTodos")[@reason.raw_literal "CompletedTodos"]) ->
              succeed CompletedTodos
          | _ ->
              fail "Expected 'AllTodos', 'ActiveTodos' or 'CompletedTodos'") : 
      view decoder)
    let todo =
      ((field "id" int) >>=
         (fun id ->
            (field "done" bool) >>=
              (fun done_ ->
                 (field "text" string) >>=
                   (fun text ->
                      (field "hovered" bool) >>=
                        (fun hovered ->
                           (field "editing" bool) >>=
                             (fun editing ->
                                succeed
                                  {
                                    id = (Z.of_int id);
                                    done_;
                                    text;
                                    hovered;
                                    editing
                                  }))))) : todo decoder)
    let state =
      ((field "newTodoText" string) >>=
         (fun newTodoText ->
            (field "nextId" int) >>=
              (fun nextId ->
                 (field "viewing" viewingTodo) >>=
                   (fun viewing ->
                      (field "todos" (list (nullable todo))) >>=
                        (fun todos ->
                           succeed
                             {
                               todos;
                               viewing;
                               nextId = (Z.of_int nextId);
                               newTodoText
                             })))) : state decoder)
  end[@@program ]
#304 "/Users/dave/dev/ai/verified-react/examples/todomvc/TodoMvc_Model.ire"

module Encode(E:D.Encode.S) =
  struct
    open E
    let viewingTodo =
      (function
       | AllTodos -> string "AllTodos"
       | ActiveTodos -> string "ActiveTodos"
       | CompletedTodos -> string "CompletedTodos" : view encoder)
    let todo =
      (fun x ->
         obj
           [("id", (int (Z.to_int x.id)));
           ("done", (bool x.done_));
           ("text", (string x.text));
           ("hovered", (bool x.hovered));
           ("editing", (bool x.editing))] : todo encoder)
    let state =
      (fun x ->
         obj
           [("newTodoText", (string x.newTodoText));
           ("nextId", (int (Z.to_int x.nextId)));
           ("viewing", (viewingTodo x.viewing));
           ("todos", (list (option todo) x.todos))] : state encoder)
  end[@@program ]

