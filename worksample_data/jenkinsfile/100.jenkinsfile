/*
  Deploys to a specified develop-environment.
*/
@Library('utils') _

def masterversion = "unknown"
def deploy_environment = "unknown"
master_versions_location_base = """gs://fdk-infra-masterversions"""

if (params.deploy_environment == "prod" && params.deploy_environment != params.prod_safeword) {
  error("You need to type ${params.deploy_environment} in prod_safeword")
  return
}


def get_masterversion_location(selected_env) {
  def env_location = [ "ut1": "${master_versions_location_base}/develop"
                      ,"it1": "${master_versions_location_base}/deployed/ut1"
                      ,"prod": "${master_versions_location_base}/deployed/it1"
                      ]
  if (env_location.containsKey(selected_env)) {
    return env_location[selected_env]
  }
  return ""
}

def get_project_fom_env(def env){
  if (env=="prod") {
    return "fdk-prod"
  }
  return "fdk-dev"
}

def get_url_from_env(def env) {
  if (env=="prod") {
    return "https://www.fellesdatakatalog.brreg.no/"
  }
  return "https://www.${env}.fellesdatakatalog.brreg.no/"
}

def hash_to_masterversion(String sha) {
  def output = sh (returnStdout: true,
                   script: "gsutil ls ${master_versions_location}/*${sha}*")
  def versions = output.tokenize( '\n' )
  def version = ""

  // gsutil ls prints in lexial order, so newest is last.
  versions.reverseEach {
    def line = it
    echo "Evaluating ${line}"
    def result = (line =~ /^$master_versions_location\/(.+)\.yaml$/)
    if (result) {
      version = result[0][1]
    }
  }
  return version
}

// Needs to be in a separate function because it uses regexp, which is not
// serializable.  Function cannot call sh itself, so returs strings that should
// be executed by caller.
@NonCPS
def generate_tag_commands(def outputImagesToTag, def de) {
  def tag_commands = []

  def yearmonthdatehhmm = new Date().format( 'yyyyMMdd_HHmm' )
  outputImagesToTag.eachLine {
    def line = it
    def service_and_tag = (line =~ /^eu.gcr.io\/fdk-infra\/(.*?):(.*?)$/)
    if (service_and_tag) {
      def service = service_and_tag[0][1]
      def tag = service_and_tag[0][2]
      tag_commands.add("gcloud -q container images add-tag ${line} eu.gcr.io/fdk-infra/${service}:env_${de}_latest &")
      tag_commands.add("gcloud -q container images add-tag ${line} eu.gcr.io/fdk-infra/${service}:env_${de}_${yearmonthdatehhmm} &")
    }
  }
  return tag_commands
}

stage('Getting versions and environment') {
  if ("${params.deploy_environment}" == "") {
    error("No valid enironment selected, gonna fail the deploy.")
  } else {
    // global scope
    deploy_environment = params.deploy_environment
  }
  // global scope
  master_versions_location = get_masterversion_location(deploy_environment)
  if (master_versions_location == "") {
    error("Not supporting dynamic environments (${deploy_environment}) yet.")
  }
  if ("${params.masterversion}" == "") {
      echo "No Masterversion supplied, will ask user."
      def choices = ""
      node('helm-kubectl') {
        def inner_choices = ""
        container('helm-gcloud-kubectl') {

          def output = sh (returnStdout: true,
                           script: "gsutil ls ${master_versions_location}/*.yaml")
          def versions = output.trim().tokenize( '\n' )
          try {
            // Tries to sort by build build_number
            // gs://fdk-infra-masterversions/develop/664_2018-11-13T13_56_04-7373e359d7e16d5dc82aa56d5e3cdafad15c929a.yaml
            // gs://fdk-infra-masterversions/develop/foo/bar/123/664_2018-11-13T13_56_04-7373e359d7e16d5dc82aa56d5e3cdafad15c929a.yaml
            // 664 is build number.
            //
            versions.sort{ it.minus(master_versions_location).split("_")[0].replace("-","_").split("_")[0].split("/")[-1].toInteger() }
          } catch (e) {
            echo "Failed custom sorting.  This means that 999 can show before 1000, etc."
          }
          // gsutil ls prints in lexial order, so newest is last.
          versions.reverseEach {
            def line = it
            // gs://fdk-infra-masterversions/all/20181025-ci-cd-a368fb8ab852e679cba7b601d6d7f3c42af27d71.yaml
            def result = (line =~ /^$master_versions_location\/(.*)\.yaml$/)
            if (result) {
              def v_all = result[0][1]
              inner_choices = inner_choices + "${v_all}" + "\n"
            }
          }
        }
        choices = inner_choices
      }
      stage ('Select version'){
          timeout(time: 600, unit: 'SECONDS') {
            masterversion = input(id: 'userInput',
                                message: 'Select your choice (newer versions showed first)',
                                parameters: [ [$class: 'ChoiceParameterDefinition',
                                                choices: choices,
                                                description: '',
                                                name: ''] ])
        }
      }
  } else {
      masterversion = "${params.masterversion}"
  }
  if (params.force == true) {
    echo "Forcing deploy even if its already deployed."
  }
  echo "Using masterversion ${masterversion} and env ${deploy_environment}"
  currentBuild.displayName = "${deploy_environment} - Deploy: ${masterversion}"
}

node ('helm-kubectl'){
  def gcp_project_name = get_project_fom_env(deploy_environment)
  container('helm-gcloud-kubectl') {
    stage('Verify Masterversion exists') {
      def sha = masterversion
      masterversion = hash_to_masterversion(sha)
      if (masterversion == "") {
        error("Unable to deploy, not able to find the masterversion specified! ${sha}")
      }
    }
    stage("Check what is deployed") {
      if (!params.force) {
        def exist = wrapper.script(stepName: "Check what is deployed.",
                       script: "gsutil ls ${master_versions_location_base}/deployed/${deploy_environment}/current/${masterversion}* > /dev/null 2>&1",
                       returnStatus: true)

        // Maybe this should be a failure instead??
        if (exist== 0) {
          currentBuild.description = "The version you are trying to deploy is already deployed.  Rerun with force=true if you want to skip this check."
          currentBuild.result = 'ABORTED'
          error("The version you are trying to deploy is already deployed.  Rerun with force=true if you want to skip this check.")
          return
        }
      }
    }

    stage('Grab Masterversion') {
      withCredentials([file(credentialsId: 'fdk-infra-file', variable: 'SA')]) {
        sh returnStatus: true, script: 'gcloud auth activate-service-account --key-file $SA'
      }
      // Copy the masrterversion to this jenkins node. AltsÃ¥ copy it to deployed and current folder for this env,
      sh returnStatus: true, script: "gsutil cp ${master_versions_location}/${masterversion}.yaml ."
    } // stage: tag version

    stage('Authenticating with cluster and helming') {
      configFileProvider([configFile(fileId: "${deploy_environment}_values.yaml", variable: 'VALUES')]) {
        sh returnStatus: true, script: 'cp $VALUES ${WORKSPACE}/values_environment.yaml'
      }

      withCredentials([file(credentialsId: "${gcp_project_name}-k8s", variable: 'SA')]) {
        sh returnStatus: true, script: 'gcloud auth activate-service-account --key-file $SA'
      }
      sh(returnStatus: true,
        script: """
        gcloud config set project """ + gcp_project_name + """
        gcloud container clusters get-credentials """ + gcp_project_name + """ --region europe-north1-a
        gcloud config set compute/region europe-north1-a
        gcloud config set compute/zone europe-north1
        """)
      sh returnStatus: true, script: 'git clone https://github.com/Informasjonsforvaltning/fdk-config.git'
      sh returnStatus: true, script: "helm template -f values_environment.yaml -f ${masterversion}.yaml fdk-config/helm/ > kubectlapply.yaml"
      sh returnStatus: true, script: 'cat kubectlapply.yaml'
    } // stage Authenticating wiht cluster

    if (deploy_environment=='prod') {
      stage('Backup') {
        def yearmonthdate = (new Date()).format( 'yyyy-MM-dd-HHmm' )

        def backup_label = "${BUILD_ID}-" + yearmonthdate
        def backupscript = """&"""
            echo "Running: " + backupscript

            wrapper.script(stepName: "Backup prod.",
                           script: backupscript,
                           returnStatus: true)
      }
    }

    stage('Deploy') {
      sh returnStatus: true, script: "gsutil cp kubectlapply.yaml gs://${gcp_project_name}-kubectl/${deploy_environment}-${BUILD_ID}.yaml"
      sh returnStatus: true, script: 'kubectl apply -f kubectlapply.yaml'
    } // stage: deploy

    stage('Tagging version') {
      withCredentials([file(credentialsId: 'fdk-infra-file', variable: 'SA')]) {
        sh returnStatus: true, script: 'gcloud auth activate-service-account --key-file $SA'
      }
      def tag_script = "gsutil cp ${master_versions_location}/${masterversion}.yaml ." // dont run in background, needed sync.
      tag_script = tag_script + "\n" + "gsutil cp ${master_versions_location}/${masterversion}.yaml ${master_versions_location_base}/deployed/${deploy_environment}/${masterversion}.yaml"

      tag_script = tag_script + "\n" + "gsutil rm ${master_versions_location_base}/deployed/${deploy_environment}/rollback/* 2>/dev/null || true"
      tag_script = tag_script + "\n" + "gsutil cp ${master_versions_location_base}/deployed/${deploy_environment}/current/* ${master_versions_location_base}/deployed/${deploy_environment}/rollback/ 2>/dev/null || true"

      tag_script = tag_script + "\n" + "gsutil rm ${master_versions_location_base}/deployed/${deploy_environment}/current/* 2>/dev/null || true"
      tag_script = tag_script + "\n" + "gsutil cp ${master_versions_location}/${masterversion}.yaml ${master_versions_location_base}/deployed/${deploy_environment}/current/${masterversion}.yaml"

      def outputImagesToTag = wrapper.script (returnStdout: true,
                                              script: "cat ${masterversion}.yaml | grep -o 'eu.gcr.io/fdk-infra.*'",
                                              stepName: "Show fdk services only")
      def tag_commands = generate_tag_commands(outputImagesToTag, deploy_environment)
      tag_commands.add("wait")
      tag_script = tag_script + "\n" + tag_commands.join('\n')

      wrapper.script(returnStdout: true,
                     script: tag_script,
                     stepName: "Tag Masterversion")
    } // stage: tag version
    stage("Notify slack") {
      def user_trigger = "system"
      wrap([$class: 'BuildUser']) {
        try {
          user_trigger = BUILD_USER
        } catch (e) {
          echo "System is caller."
        }
      }
      def run_url = get_url_from_env(deploy_environment)
      slackSend   channel: '#jenkins',
                  color: '#7f7fff',
                  message: "${deploy_environment}: ${user_trigger} deployed new version: ${masterversion}- url: ${run_url}"
    }
    stage("Generate env version files") {
      build job: 'create-version-overview', wait: false
    }
  }
}
