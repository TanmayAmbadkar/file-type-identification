#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
//   SOURCE_TAG
//   GOLANG_VERSION = "1.16.2" (master branch needs something newer)
//   MIDSTM_BRANCH
//   FORCE_BUILD

// NOTE: can use https://github.com/redhat-developer/traefik/tree/crw-2.y-rhel-8 if need to fork or use a commit that's not behind a tag/branch
def SOURCE_REPO = "traefik/traefik" // upstream source repo should be https://github.com/traefik/traefik
def MIDSTM_REPO = "redhat-developer/codeready-workspaces-images" // repo to use as target
def SYNC_REPO="traefik"
String SOURCE_BRANCH = "master" // upstream source repo branch, eg., crw-2.y-rhel-8 from fork

def OLD_SHA=""
def SOURCE_SHA=""
def NEW_SHA=""

// Nodes to run artifact build on ex. ['rhel8', 's390x-rhel8', 'ppc64le-rhel8']
def List nodeLabels = ['rhel8', 's390x-rhel8', 'ppc64le-rhel8']
def Map tasks = [failFast: false]

timeout(120) {
    def String nodeLabel = "${nodeLabels[0]}"
    node(nodeLabel) {
        stage ("Sync repos on " + nodeLabel) {
            wrap([$class: 'TimestamperBuildWrapper']) {
                withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
                    file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
                    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
                    def util = load "${WORKSPACE}/util.groovy"
                    cleanWs()
                    CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
                    println "CRW_VERSION = '" + CRW_VERSION + "'"
                    util.bootstrap(CRW_KEYTAB)

                    println "########################################################################################################"
                    println "##  Clone and update github.com/${SOURCE_REPO}.git"
                    println "########################################################################################################"
                    SOURCE_DIR="${WORKSPACE}/source"
                    util.cloneRepo("https://github.com/${SOURCE_REPO}.git", SOURCE_DIR, SOURCE_BRANCH)
                    sh('''#!/bin/bash
                    cd ''' + SOURCE_DIR + '''
                    git checkout ''' + SOURCE_TAG + '''
                    ''')
                    SOURCE_SHA = util.getLastCommitSHA(SOURCE_DIR)
                    println "Got SOURCE_SHA in source folder: " + SOURCE_SHA

                    println "########################################################################################################"
                    println "##  Sync ${SYNC_REPO} to codeready-workspaces-images"
                    println "########################################################################################################"
                    util.cloneRepo("https://github.com/${MIDSTM_REPO}", "${WORKSPACE}/target", MIDSTM_BRANCH)
                    OLD_SHA = util.getLastCommitSHA("${WORKSPACE}/target")
                    TARGET_DIR="${WORKSPACE}/target/" + util.getCRWLongName(SYNC_REPO)
                    println "Got OLD_SHA in target folder: " + OLD_SHA

                    writeFile file: "rsync-upstream-exclude", text: '''.semaphoreci
.travis
.travis.yaml
.gitattributes
traefik.sample.toml
traefik.sample.yml'''
                    // ignore files that are ONLY in downstream (not midstream or upstream)
                    writeFile file: "rsync-brew-exclude", text: '''sources
get-sources-jenkins.sh
cvp.yml
tests/
content_sets.yml
content_sets.repo
container.yaml
.gitignore
rhel.Dockerfile'''
                    sh('''
                      rsync -avhz --checksum --exclude-from ${WORKSPACE}/rsync-upstream-exclude --exclude-from ${WORKSPACE}/rsync-brew-exclude --exclude .git/ --exclude .github/ --exclude .gitignore \
                        ''' + SOURCE_DIR + '''/ ''' + TARGET_DIR + '''/ | grep -E -v '/$'
                    ''')

                    // transform exp.Dockerfile into rhel.Dockerfile and add brew metadata 
                    sh('''#!/bin/bash
          cd ''' + TARGET_DIR + '''
          sed -e 's|^FROM node:12.*|FROM registry.redhat.io/rhel8/nodejs-12 as webui \\
USER root \\
RUN yum install -y python2|g' \\
          -e 's|^RUN npm install|RUN npm install --unsafe-perm=true|g' \\
          -e 's|^FROM golang.*|FROM registry.redhat.io/ubi8 as gobuild|g' \\
          -e 's|apk --update upgrade|true|g' \\
          -e 's|apk --no-cache --no-progress add git [^\\]*|dnf install -y git gcc |g' \\
          -e 's|update-ca-certificates|update-ca-trust|g' \\
          -e 's|curl -fsSL -o /usr/local/bin/go-bindata .*|ARCH=$(uname -m) \\&\\& if [ "$ARCH" == "x86_64" ] ; then ARCH=amd64; fi \\\\ \\
    \\&\\& curl -fsSL -O https://golang.org/dl/go''' + GOLANG_VERSION + '''.linux-$ARCH.tar.gz \\\\ \\
    \\&\\& tar xzf go''' + GOLANG_VERSION + '''.linux-$ARCH.tar.gz -C /usr/local \\\\ \\
    \\&\\& ln -s /usr/local/go/bin/go /usr/local/bin/go \\\\ \\
    \\&\\& ln -s /usr/local/go/bin/gofmt /usr/local/bin/gofmt \\\\ \\
    \\&\\& export GOPATH=/usr/local \\&\\& go get -u github.com/containous/go-bindata/... \\\\|g' exp.Dockerfile > rhel.Dockerfile
          sed -i '/^## IMAGE/,$d' rhel.Dockerfile
          sed -i -e 's|^RUN ./script/make.sh generate binary|RUN export VERSION="''' + SOURCE_SHA + '''" \\&\\& ./script/make.sh generate binary|' rhel.Dockerfile
          sed -i -e 's|^FROM .*|# https://access.redhat.com/containers/?tab=tags#/registry.access.redhat.com/ubi8-minimal \\
FROM ubi8-minimal:8.3 \\
\\
ENV SUMMARY="Red Hat CodeReady Workspaces - Traefik" \\\\ \\
    DESCRIPTION="Red Hat CodeReady Workspaces - Traefik" \\\\ \\
    PRODNAME="codeready-workspaces" \\\\ \\
    COMPNAME="traefik-rhel8" \\
\\
COPY asset-*.tar.gz /tmp/assets/ \\
|g' \\
\\
-e 's|^COPY dist/traefik.*|RUN microdnf -y install tar gzip \\&\\& \\\\ \\
    tar xzf /tmp/assets/asset-traefik-$(uname -m).tar.gz -C / \\&\\& \\\\ \\
    rm -fr /tmp/assets/ \\&\\& \\\\ \\
    chmod 755 /traefik \\&\\& \\\\ \\
    microdnf -y remove tar gzip \\&\\& \\\\ \\
    microdnf -y update \\|\\| true \\&\\& \\\\ \\
    microdnf -y clean all \\&\\& rm -rf /var/cache/yum \\&\\& echo "Installed Packages" \\&\\& rpm -qa \\| sort -V \\&\\& echo "End Of Installed Packages" \\
|g' \\
\\
-e '$a \\
\\
LABEL summary="$SUMMARY" \\\\ \\
      description="$DESCRIPTION" \\\\ \\
      io.k8s.description="$DESCRIPTION" \\\\ \\
      io.k8s.display-name="$DESCRIPTION" \\\\ \\
      io.openshift.tags="$PRODNAME,$COMPNAME" \\\\ \\
      com.redhat.component="$PRODNAME-$COMPNAME-container" \\\\ \\
      name="$PRODNAME/$COMPNAME" \\\\ \\
      version="''' + CRW_VERSION + '''" \\\\ \\
      license="EPLv2" \\\\ \\
      maintainer="Nick Boldt <nboldt@redhat.com>" \\\\ \\
      io.openshift.expose-services="" \\\\ \\
      usage=""' \\
Dockerfile
                    ''')

                    // TODO: run updateBaseImages to get the latest ubi8 base (rather than hardcoding it above)

                    // push to dist-git
                    sh('''#!/bin/bash -xe
                       export KRB5CCNAME=/var/tmp/crw-build_ccache
                       cd ''' + TARGET_DIR + '''
                       git add . -A -f
                       git commit -m "sync from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''" || true
                       COMMIT_SHA="$(git log origin/''' + MIDSTM_BRANCH + '''..''' + MIDSTM_BRANCH + ''' --pretty=format:%H)"
                       if [ ! -z "$COMMIT_SHA" ] ; then
                         git push origin ''' + MIDSTM_BRANCH + ''' || true
                       fi
                    ''')
                    NEW_SHA = util.getLastCommitSHA(TARGET_DIR)
                    println "Got NEW_SHA in target folder: " + NEW_SHA
                    currentBuild.description="Upstream sync done"
                } // withCredentials
            } // wrap
        } // stage
    } // node
} // timeout

for (int i=0; i < nodeLabels.size(); i++) {
  def String nodeLabel = "${nodeLabels[i]}"
  print "[" + (i+1) + "/" + nodeLabels.size() + "] Create task to run on ${nodeLabel}"
  tasks[nodeLabels[i]] = { ->
    timeout(120) {
        node(nodeLabel) {
            stage("Build artifacts on " + nodeLabel) {
                wrap([$class: 'TimestamperBuildWrapper']) {
                    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
                    def util = load "${WORKSPACE}/util.groovy"
                    cleanWs()
                    withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
                        usernamePassword(credentialsId: 'registry.redhat.io_crw_bot', usernameVariable: 'CRW_BOT_USERNAME', passwordVariable: 'CRW_BOT_PASSWORD'),
                        file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
                        util.bootstrap(CRW_KEYTAB)
                        // build project in Jenkins so we can collect asset-* files later via get-sources-jenkins.sh, then trigger a build brew with those files
                        if (NEW_SHA != OLD_SHA || FORCE_BUILD == "true") {
                            util.cloneRepo("https://github.com/${MIDSTM_REPO}", "${WORKSPACE}/${SYNC_REPO}", MIDSTM_BRANCH)
                            util.loginToRegistries()
                            sh('''#!/bin/bash -xe
		                export TMP_IMG="traefik.tmp"
                                cd ${WORKSPACE}/''' + SYNC_REPO + '''/''' + util.getCRWLongName(SYNC_REPO) + '''
		                docker build -t $TMP_IMG -f rhel.Dockerfile .
		                mkdir -p brew-assets
		                docker run --rm -v $PWD/brew-assets:/brew-assets $TMP_IMG sh -c "
		                  cp /go/src/github.com/traefik/traefik/dist/traefik /brew-assets
		                "
		                tar czf ${WORKSPACE}/asset-traefik-$(uname -m).tar.gz -C $PWD/brew-assets .
		                docker rmi -f $TMP_IMG
                            ''')
                            archiveArtifacts fingerprint: false, onlyIfSuccessful: true, allowEmptyArchive: false, artifacts: "asset-*.tar.gz, logs/*"
                            currentBuild.description+="; New ${nodeLabel} artifacts built"
                        } else {
                            println "No changes upstream, nothing to build in Jenkins!"
                            currentBuild.description+="; No new ${nodeLabel} artifacts"
                            currentBuild.result = 'UNSTABLE'
                        }
                    } // withCredentials
                } // wrap
            } // stage
        } // node
    } // timeout
  } // tasks
} // for

stage("Builds") {
  println "########################################################################################################"
  println "##  Build ${SYNC_REPO} assets"
  println "########################################################################################################"
  parallel(tasks)
}

// kick off get-sources-rhpkg-container-build_2.y job
nodeLabel = "${nodeLabels[0]}"
node(nodeLabel) {
  stage ("Build containers on ${nodeLabel}") {
    println "########################################################################################################"
    println "##  Kickoff Sync to downstream job"
    println "########################################################################################################"
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
        if (!OLD_SHA.equals(NEW_SHA) || FORCE_BUILD == "true") {
            JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
            build(
                job: 'sync-to-downstream_' + JOB_BRANCH,
                wait: true,
                propagate: true,
                parameters: [
                  [
                    $class: 'StringParameterValue',
                    name: 'token',
                    value: "CI_BUILD"
                  ],
                  [
                    $class: 'StringParameterValue',
                    name: 'cause',
                    value: SYNC_REPO + "+respin+by+${BUILD_TAG}"
                  ],
                  [
                    $class: 'StringParameterValue',
                    name: 'REPOS',
                    value: util.getCRWLongName(SYNC_REPO)
                  ],
                  [
                    $class: 'StringParameterValue',
                    name: 'JOB_BRANCH',
                    value: JOB_BRANCH
                  ],
                  [
                    $class: 'StringParameterValue',
                    name: 'MIDSTM_BRANCH',
                    value: "${MIDSTM_BRANCH}"
                  ],
                  [
                    $class: 'BooleanParameterValue',
                    name: 'FORCE_BUILD',
                    value: FORCE_BUILD
                  ],
                  [
                    $class: 'BooleanParameterValue',
                    name: 'SCRATCH',
                    value: false
                  ]
                ]
              )
            currentBuild.description+="; Downstream sync job triggered"
          } else {
            println "No changes upstream, nothing to sync / build in brew!"
            currentBuild.description+="; No sync or Brew build"
            currentBuild.result = 'UNSTABLE'
          }
    } else {
      util.notifyBuildFailed()
    } // if
  } // stage
} //node
